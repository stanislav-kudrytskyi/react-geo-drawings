"use strict";(self.webpackChunkreact_geo_drawings=self.webpackChunkreact_geo_drawings||[]).push([[358],{"./src/drawings/LocalizationProvider.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{Fe:function(){return Terms},_C:function(){return LocalizationProvider},wY:function(){return useGetLocalisedLabel}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");let Terms=function(Terms){return Terms[Terms.DELETE_VERTEX=0]="DELETE_VERTEX",Terms[Terms.DELETE_POLYGON=1]="DELETE_POLYGON",Terms}({});const defaults={[Terms.DELETE_POLYGON]:"Delete polygon",[Terms.DELETE_VERTEX]:"Delete point"},LocalizationContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(defaults),LocalizationProvider=_ref=>{let{children:children,localization:localization}=_ref;const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>localization?{...defaults,...localization}:defaults),[localization]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(LocalizationContext.Provider,{value:value,children:children})};LocalizationProvider.displayName="LocalizationProvider";const useGetLocalisedLabel=()=>{const context=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(LocalizationContext);return key=>context[key]};try{LocalizationProvider.displayName="LocalizationProvider",LocalizationProvider.__docgenInfo={description:"",displayName:"LocalizationProvider",props:{localization:{defaultValue:null,description:"",name:"localization",required:!1,type:{name:"Partial<LocalizationMap>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/drawings/LocalizationProvider.tsx#LocalizationProvider"]={docgenInfo:LocalizationProvider.__docgenInfo,name:"LocalizationProvider",path:"src/drawings/LocalizationProvider.tsx#LocalizationProvider"})}catch(__react_docgen_typescript_loader_error){}},"./src/drawings/constants.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{TP:function(){return DEFAULT},oO:function(){return DrawingMode}});let DrawingMode=function(DrawingMode){return DrawingMode[DrawingMode.NONE=0]="NONE",DrawingMode[DrawingMode.POLYGON=1]="POLYGON",DrawingMode}({});const DEFAULT="default"},"./src/index.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{WK:function(){return drawings_GeoMap},Ib:function(){return MapProvider},Jx:function(){return drawings_Marker},mg:function(){return drawings_Polygon},Pn:function(){return drawings_usePolygonsUpdates}});var react=__webpack_require__("./node_modules/react/index.js"),constants=__webpack_require__("./src/drawings/constants.ts"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const PolygonContext=(0,react.createContext)(void 0),polygonDefinitionReducer=(prevDefinition,payload)=>{const group=payload.group||constants.TP;prevDefinition.has(group)||prevDefinition.set(group,new Map);const polygonsGroup=prevDefinition.get(group);if(!payload.polygonId)throw new Error("polygonId is missed");if(polygonsGroup?.has(payload.polygonId)){const prevState=polygonsGroup.get(payload.polygonId);polygonsGroup.set(payload.polygonId,{...prevState,group:group,polygonId:payload.polygonId,points:payload.points})}else polygonsGroup.set(payload.polygonId,{group:group,polygonId:payload.polygonId,points:payload.points});return new Map(prevDefinition)},polygonRemovedReducer=(prevDefinition,payload)=>{const group=payload.group||constants.TP,polygonsGroup=prevDefinition.get(group);if(!polygonsGroup)throw new Error(`Polygon group has not been defined ${group}`);if(!payload.polygonId)throw new Error("polygonId is missed");return polygonsGroup.delete(payload.polygonId),new Map(prevDefinition)},polygonContextReducer=(state,_ref)=>{let{type:type,payload:payload}=_ref;switch(type){case"polygonUpdate":return{...state,polygons:polygonDefinitionReducer(state.polygons,payload)};case"polygonAdded":return{...state,polygons:polygonDefinitionReducer(state.polygons,payload),addedPolygons:[...state.addedPolygons,payload]};case"polygonDeleted":return{...state,polygons:polygonRemovedReducer(state.polygons,payload),addedPolygons:state.addedPolygons.filter((_ref2=>{let{polygonId:polygonId}=_ref2;return polygonId!==payload.polygonId}))};case"setDisplaySettings":return{...state,displaySettings:payload};default:throw new Error(`Unknown dispatch action: ${type}`)}},PolygonBoard=_ref3=>{let{children:children}=_ref3;const[polygonState,dispatch]=(0,react.useReducer)(polygonContextReducer,{polygons:new Map,addedPolygons:[]}),[contextState,setContextState]=(0,react.useState)({dispatch:dispatch});return(0,react.useEffect)((()=>{setContextState({...polygonState,dispatch:dispatch})}),[polygonState,dispatch]),(0,jsx_runtime.jsx)(PolygonContext.Provider,{value:contextState,children:children||null})};PolygonBoard.displayName="PolygonBoard";const usePolygonRegistryDispatch=()=>{const context=(0,react.useContext)(PolygonContext);if(!context?.dispatch)throw new Error("Wrong PolygonRegistry initialization");return context?.dispatch},usePolygonsData=()=>(0,react.useContext)(PolygonContext)?.polygons||new Map,useSetPolygonDisplaySettings=displaySettings=>{usePolygonRegistryDispatch()({type:"setDisplaySettings",payload:displaySettings})};try{PolygonBoard.displayName="PolygonBoard",PolygonBoard.__docgenInfo={description:"",displayName:"PolygonBoard",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/drawings/PolygonBoard.tsx#PolygonBoard"]={docgenInfo:PolygonBoard.__docgenInfo,name:"PolygonBoard",path:"src/drawings/PolygonBoard.tsx#PolygonBoard"})}catch(__react_docgen_typescript_loader_error){}try{useSetPolygonDisplaySettings.displayName="useSetPolygonDisplaySettings",useSetPolygonDisplaySettings.__docgenInfo={description:"",displayName:"useSetPolygonDisplaySettings",props:{fillColor:{defaultValue:null,description:"",name:"fillColor",required:!1,type:{name:"string"}},fillOpacity:{defaultValue:null,description:"",name:"fillOpacity",required:!1,type:{name:"number"}},borderColor:{defaultValue:null,description:"",name:"borderColor",required:!1,type:{name:"string"}},borderOpacity:{defaultValue:null,description:"",name:"borderOpacity",required:!1,type:{name:"number"}},borderWidth:{defaultValue:null,description:"",name:"borderWidth",required:!1,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/drawings/PolygonBoard.tsx#useSetPolygonDisplaySettings"]={docgenInfo:useSetPolygonDisplaySettings.__docgenInfo,name:"useSetPolygonDisplaySettings",path:"src/drawings/PolygonBoard.tsx#useSetPolygonDisplaySettings"})}catch(__react_docgen_typescript_loader_error){}const DisplaySettingsContext=(0,react.createContext)({}),DisplaySettingsProvider=_ref=>{let{children:children}=_ref;const[polygonSettings,setPolygonSettings]=(0,react.useState)({borderColor:"#FF0000",borderOpacity:.8,borderWidth:2,fillColor:"#FF0000",fillOpacity:.35}),context=(0,react.useMemo)((()=>({polygon:polygonSettings,setPolygonSettings:setPolygonSettings})),[polygonSettings]);return(0,jsx_runtime.jsx)(DisplaySettingsContext.Provider,{value:context,children:children})};DisplaySettingsProvider.displayName="DisplaySettingsProvider";const DisplaySettingsProvider_useSetPolygonDisplaySettings=displaySettings=>{const context=useContext(DisplaySettingsContext);context?.setPolygonSettings&&context?.polygon&&context.setPolygonSettings(displaySettings)};try{DisplaySettingsProvider.displayName="DisplaySettingsProvider",DisplaySettingsProvider.__docgenInfo={description:"",displayName:"DisplaySettingsProvider",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/drawings/DisplaySettingsProvider.tsx#DisplaySettingsProvider"]={docgenInfo:DisplaySettingsProvider.__docgenInfo,name:"DisplaySettingsProvider",path:"src/drawings/DisplaySettingsProvider.tsx#DisplaySettingsProvider"})}catch(__react_docgen_typescript_loader_error){}try{DisplaySettingsProvider_useSetPolygonDisplaySettings.displayName="useSetPolygonDisplaySettings",DisplaySettingsProvider_useSetPolygonDisplaySettings.__docgenInfo={description:"",displayName:"useSetPolygonDisplaySettings",props:{fillColor:{defaultValue:null,description:"",name:"fillColor",required:!1,type:{name:"string"}},fillOpacity:{defaultValue:null,description:"",name:"fillOpacity",required:!1,type:{name:"number"}},borderColor:{defaultValue:null,description:"",name:"borderColor",required:!1,type:{name:"string"}},borderOpacity:{defaultValue:null,description:"",name:"borderOpacity",required:!1,type:{name:"number"}},borderWidth:{defaultValue:null,description:"",name:"borderWidth",required:!1,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/drawings/DisplaySettingsProvider.tsx#useSetPolygonDisplaySettings"]={docgenInfo:DisplaySettingsProvider_useSetPolygonDisplaySettings.__docgenInfo,name:"useSetPolygonDisplaySettings",path:"src/drawings/DisplaySettingsProvider.tsx#useSetPolygonDisplaySettings"})}catch(__react_docgen_typescript_loader_error){}const MapContext=(0,react.createContext)(void 0),MapProvider=_ref=>{let{provider:provider,apiKey:apiKey,children:children}=_ref;const[mapState]=(0,react.useState)({provider:provider,apiKey:apiKey});if("google"!==provider&&"mapbox"!==provider)throw new Error(`Unsupported map provider: ${provider}`);return(0,jsx_runtime.jsx)(MapContext.Provider,{value:mapState,children:(0,jsx_runtime.jsx)(DisplaySettingsProvider,{children:(0,jsx_runtime.jsx)(PolygonBoard,{children:children})})})};MapProvider.displayName="MapProvider";const useProvider=()=>{const context=(0,react.useContext)(MapContext);if(!context?.provider)throw new Error("Value for MapProvider value hasn't been provided! Please put wrap your component with MapProvider");return context.provider};try{MapProvider.displayName="MapProvider",MapProvider.__docgenInfo={description:"",displayName:"MapProvider",props:{provider:{defaultValue:null,description:"",name:"provider",required:!0,type:{name:"enum",value:[{value:'"google"'},{value:'"mapbox"'},{value:'"openstreetmap"'}]}},apiKey:{defaultValue:null,description:"",name:"apiKey",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/drawings/MapProvider.tsx#MapProvider"]={docgenInfo:MapProvider.__docgenInfo,name:"MapProvider",path:"src/drawings/MapProvider.tsx#MapProvider"})}catch(__react_docgen_typescript_loader_error){}var index_umd=__webpack_require__("./node_modules/@googlemaps/react-wrapper/dist/index.umd.js");const Map_Map=_ref=>{let{containerRef:containerRef,onInit:onInit,center:center,minZoom:minZoom,zoom:zoom,onZoomChange:onZoomChange}=_ref;const map=useGoogleMap();return(0,react.useEffect)((()=>{if(containerRef.current&&!map){const m=new google.maps.Map(containerRef.current,{center:{lat:center?.lat||48.466,lng:center?.lng||57.118},zoom:zoom||5,minZoom:minZoom});onInit(m)}})),(0,react.useEffect)((()=>{let zoomListener;return map&&onZoomChange&&(zoomListener=google.maps.event.addListener(map,"zoom_changed",(()=>{onZoomChange(map.getZoom())}))),()=>{zoomListener&&google.maps.event.removeListener(zoomListener)}}),[map,onZoomChange]),(0,react.useEffect)((()=>{void 0!==zoom&&map?.setZoom(zoom)}),[map,zoom]),(0,react.useEffect)((()=>{map&&center&&map.setCenter({lat:center.lat,lng:center.lng})}),[map,center]),null};var google_Map_Map=Map_Map;try{Map_Map.displayName="Map",Map_Map.__docgenInfo={description:"",displayName:"Map",props:{onInit:{defaultValue:null,description:"",name:"onInit",required:!0,type:{name:"(map: Map) => void"}},containerRef:{defaultValue:null,description:"",name:"containerRef",required:!0,type:{name:"RefObject<HTMLDivElement>"}},center:{defaultValue:null,description:"",name:"center",required:!1,type:{name:"Point"}},minZoom:{defaultValue:null,description:"",name:"minZoom",required:!1,type:{name:"number"}},zoom:{defaultValue:null,description:"",name:"zoom",required:!1,type:{name:"number"}},onZoomChange:{defaultValue:null,description:"",name:"onZoomChange",required:!1,type:{name:"((zoom?: number) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/google/Map/Map.tsx#Map"]={docgenInfo:Map_Map.__docgenInfo,name:"Map",path:"src/google/Map/Map.tsx#Map"})}catch(__react_docgen_typescript_loader_error){}const DrawingManager=_ref=>{let{onInit:onInit,modes:modes}=_ref;const map=useGoogleMap(),drawingManager=(0,react.useMemo)((()=>new google.maps.drawing.DrawingManager({drawingMode:null})),[]),defaultDrawingControlOptions=(0,react.useMemo)((()=>map?{position:google.maps.ControlPosition.TOP_CENTER,drawingModes:null}:null),[map]),drawingModes=(0,react.useMemo)((()=>{if(!modes)return null;const modesMap={[constants.oO.NONE]:null,[constants.oO.POLYGON]:google.maps.drawing.OverlayType.POLYGON};return modes.filter((mode=>!!mode)).map((mode=>modesMap[mode]))}),[modes]);return(0,react.useEffect)((()=>{drawingManager&&drawingManager.setOptions({drawingControlOptions:{...defaultDrawingControlOptions,drawingModes:drawingModes},drawingControl:!!drawingModes?.length})}),[drawingManager,drawingModes,defaultDrawingControlOptions]),(0,react.useEffect)((()=>{drawingManager&&map&&(drawingManager.setMap(map),onInit(drawingManager))}),[drawingManager,map]),null};var Map_DrawingManager=DrawingManager;try{DrawingManager.displayName="DrawingManager",DrawingManager.__docgenInfo={description:"",displayName:"DrawingManager",props:{onInit:{defaultValue:null,description:"",name:"onInit",required:!0,type:{name:"(drawingManager: DrawingManager) => void"}},modes:{defaultValue:null,description:"",name:"modes",required:!1,type:{name:"DrawingMode[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/google/Map/DrawingManager.tsx#DrawingManager"]={docgenInfo:DrawingManager.__docgenInfo,name:"DrawingManager",path:"src/google/Map/DrawingManager.tsx#DrawingManager"})}catch(__react_docgen_typescript_loader_error){}var v4=__webpack_require__("./node_modules/uuid/dist/esm-browser/v4.js");const mvcToLatLong=gLatLng=>gLatLng.map((el=>({lat:el.lat(),lng:el.lng()})));const ControlBoard=_ref=>{let{addedPolygonDisplaySettings:addedPolygonDisplaySettings}=_ref;const drawingManager=useDrawingManger(),dispatch=(()=>{const dispatch=usePolygonRegistryDispatch();return(0,react.useCallback)((payload=>{dispatch({type:"polygonAdded",payload:payload})}),[dispatch])})(),contextMenu=useContextMenu(),addedPolygons=(0,react.useContext)(PolygonContext)?.addedPolygons||[];return(0,react.useEffect)((()=>{let completeListener;return drawingManager&&(completeListener=google.maps.event.addListener(drawingManager,"polygoncomplete",(polygon=>{polygon.setEditable(!0),dispatch({polygonId:(0,v4.Z)(),points:mvcToLatLong(polygon.getPath().getArray()),apiObject:polygon})}))),()=>{completeListener&&google.maps.event.removeListener(completeListener)}}),[drawingManager,contextMenu]),addedPolygons.length?(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:addedPolygons.map((polygon=>(0,jsx_runtime.jsx)(drawings_Polygon,{displaySettings:addedPolygonDisplaySettings,apiObject:polygon.apiObject,coordinates:polygon.points,figureId:polygon.polygonId,removable:!0,editable:polygon.apiObject.getEditable()},polygon.polygonId)))}):null};var Map_ControlBoard=ControlBoard;try{ControlBoard.displayName="ControlBoard",ControlBoard.__docgenInfo={description:"",displayName:"ControlBoard",props:{addedPolygonDisplaySettings:{defaultValue:null,description:"",name:"addedPolygonDisplaySettings",required:!1,type:{name:"PolygonDisplaySettings"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/google/Map/ControlBoard.tsx#ControlBoard"]={docgenInfo:ControlBoard.__docgenInfo,name:"ControlBoard",path:"src/google/Map/ControlBoard.tsx#ControlBoard"})}catch(__react_docgen_typescript_loader_error){}var injectStylesIntoStyleTag=__webpack_require__("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),injectStylesIntoStyleTag_default=__webpack_require__.n(injectStylesIntoStyleTag),styleDomAPI=__webpack_require__("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),styleDomAPI_default=__webpack_require__.n(styleDomAPI),insertBySelector=__webpack_require__("./node_modules/style-loader/dist/runtime/insertBySelector.js"),insertBySelector_default=__webpack_require__.n(insertBySelector),setAttributesWithoutAttributes=__webpack_require__("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),setAttributesWithoutAttributes_default=__webpack_require__.n(setAttributesWithoutAttributes),insertStyleElement=__webpack_require__("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),insertStyleElement_default=__webpack_require__.n(insertStyleElement),styleTagTransform=__webpack_require__("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),styleTagTransform_default=__webpack_require__.n(styleTagTransform),context_menu=__webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./src/google/Menu/context-menu.css"),options={};options.styleTagTransform=styleTagTransform_default(),options.setAttributes=setAttributesWithoutAttributes_default(),options.insert=insertBySelector_default().bind(null,"head"),options.domAPI=styleDomAPI_default(),options.insertStyleElement=insertStyleElement_default();injectStylesIntoStyleTag_default()(context_menu.Z,options),context_menu.Z&&context_menu.Z.locals&&context_menu.Z.locals;var client=__webpack_require__("./node_modules/react-dom/client.js");const contextMenuOverlayFactory=map=>{class ContextMenuOverlayView extends google.maps.OverlayView{constructor(googleMap){super(),this.googleMap=googleMap,this.menuContainer=document.createElement("div"),this.menuContainer.className="delete-menu",this.menuRoot=(0,client.createRoot)(this.menuContainer)}onAdd=()=>{const menu=this,currentMap=this.getMap();this.getPanes().floatPane.appendChild(this.menuContainer),this.containerListener=google.maps.event.addDomListener(currentMap.getDiv(),"mousedown",(e=>{menu.menuContainer.contains(e.target)||menu.close()}),!0)};onRemove=()=>{this.containerListener&&google.maps.event.removeListener(this.containerListener),this.menuContainer.parentNode.removeChild(this.menuContainer),this.set("position",null)};close=()=>{this.setMap(null)};draw=()=>{const position=this.get("position"),projection=this.getProjection();if(!position||!projection)return;const point=projection.fromLatLngToDivPixel(position);this.menuContainer.style.top=`${point.y}px`,this.menuContainer.style.left=`${point.x}px`};open=(position,items)=>{this.set("position",position),this.setMap(this.googleMap),this.menuRoot.render(items),this.draw()}}return new ContextMenuOverlayView(map)};try{contextMenuOverlayFactory.displayName="contextMenuOverlayFactory",contextMenuOverlayFactory.__docgenInfo={description:"",displayName:"contextMenuOverlayFactory",props:{controls:{defaultValue:null,description:"Additional controls to attach to the map. To add a control to the map,\nadd the control&#39;s <code>&lt;div&gt;</code> to the\n<code>MVCArray</code> corresponding to the <code>ControlPosition</code>\nwhere it should be rendered.",name:"controls",required:!0,type:{name:"MVCArray<HTMLElement>[]"}},data:{defaultValue:null,description:"An instance of <code>Data</code>, bound to the map. Add features to this\n<code>Data</code> object to conveniently display them on this map.",name:"data",required:!0,type:{name:"Data"}},fitBounds:{defaultValue:null,description:"Sets the viewport to contain the given bounds.</br>\n<strong>Note:</strong> When the map is set to <code>display: none</code>,\nthe <code>fitBounds</code> function reads the map&#39;s size as 0x0, and\ntherefore does not do anything. To change the viewport while the map is\nhidden, set the map to <code>visibility: hidden</code>, thereby ensuring\nthe map div has an actual size. For vector maps, this method sets the\nmap&#39;s tilt and heading to their default zero values. Calling this\nmethod may cause a smooth animation as the map pans and zooms to fit the\nbounds. Whether or not this method animates depends on an internal\nheuristic.\n@param bounds Bounds to show.\n@param padding Padding in pixels. The bounds will be fit in the part of\nthe map that remains after padding is removed. A number value will\nyield the same padding on all 4 sides. Supply 0 here to make a\nfitBounds idempotent on the result of getBounds.",name:"fitBounds",required:!0,type:{name:"(bounds: LatLngBounds | LatLngBoundsLiteral, padding?: number | Padding | undefined) => void"}},getBounds:{defaultValue:null,description:"Returns the lat/lng bounds of the current viewport. If more than one copy\nof the world is visible, the bounds range in longitude from -180 to 180\ndegrees inclusive. If the map is not yet initialized or center and zoom\nhave not been set then the result is <code>undefined</code>. For vector\nmaps with non-zero tilt or heading, the returned lat/lng bounds\nrepresents the smallest bounding box that includes the visible region of\nthe map&#39;s viewport. See {@link * google.maps.MapCanvasProjection.getVisibleRegion} for getting the exact\nvisible region of the map&#39;s viewport.",name:"getBounds",required:!0,type:{name:"() => LatLngBounds | undefined"}},getCenter:{defaultValue:null,description:'Returns the position displayed at the center of the map. Note that\nthis {@link google.maps.LatLng} object is <em>not</em> wrapped. See\n<code><a href="#LatLng">LatLng</a></code> for more information. If the\ncenter or bounds have not been set then the result is\n<code>undefined</code>.',name:"getCenter",required:!0,type:{name:"() => LatLng | undefined"}},getClickableIcons:{defaultValue:null,description:"Returns the clickability of the map icons. A map icon represents a point\nof interest, also known as a POI. If the returned value is\n<code>true</code>, then the icons are clickable on the map.",name:"getClickableIcons",required:!0,type:{name:"() => boolean | undefined"}},getDiv:{defaultValue:null,description:"",name:"getDiv",required:!0,type:{name:"() => HTMLElement"}},getFeatureLayer:{defaultValue:null,description:"Available only in the v=beta channel: https://goo.gle/3oAthT3.\nReturns the <code>FeatureLayer</code> of the specific\n<code>FeatureType</code>. A <code>FeatureLayer</code> must be enabled in\nthe Google Cloud Console. If a <code>FeatureLayer</code> of the specified\n<code>FeatureType</code> does not exist on this map, or if Data-driven\nstyling is not available (no map ID, no vector tiles, and no\n<code>FeatureLayer</code> enabled in the map style), this logs an error,\nand the resulting <code>FeatureLayer.isAvailable</code> will be false.",name:"getFeatureLayer",required:!0,type:{name:"(featureType: FeatureType) => FeatureLayer"}},getHeading:{defaultValue:null,description:"Returns the compass heading of the map. The heading value is measured in\ndegrees (clockwise) from cardinal direction North. If the map is not yet\ninitialized then the result is <code>undefined</code>.",name:"getHeading",required:!0,type:{name:"() => number | undefined"}},getMapCapabilities:{defaultValue:null,description:"Available only in the v=beta channel: https://goo.gle/3oAthT3.\nInforms the caller of the current capabilities available to the map based\non the Map ID that was provided.",name:"getMapCapabilities",required:!0,type:{name:"() => MapCapabilities"}},getMapTypeId:{defaultValue:null,description:"",name:"getMapTypeId",required:!0,type:{name:"() => string | undefined"}},getProjection:{defaultValue:null,description:"Returns the current <code>Projection</code>. If the map is not yet\ninitialized then the result is <code>undefined</code>. Listen to the\n<code>projection_changed</code> event and check its value to ensure it is\nnot <code>undefined</code>.",name:"getProjection",required:!0,type:{name:"() => Projection | undefined"}},getRenderingType:{defaultValue:null,description:"Returns the current RenderingType of the map.",name:"getRenderingType",required:!0,type:{name:"() => RenderingType"}},getStreetView:{defaultValue:null,description:"Returns the default <code>StreetViewPanorama</code> bound to the map,\nwhich may be a default panorama embedded within the map, or the panorama\nset using <code>setStreetView()</code>. Changes to the map&#39;s\n<code>streetViewControl</code> will be reflected in the display of such a\nbound panorama.",name:"getStreetView",required:!0,type:{name:"() => StreetViewPanorama"}},getTilt:{defaultValue:null,description:"Returns the current angle of incidence of the map, in degrees from the\nviewport plane to the map plane. For raster maps, the result will be\n<code>0</code> for imagery taken directly overhead or <code>45</code> for\n45&deg; imagery. This method does not return the value set by\n<code>setTilt</code>. See <code>setTilt</code> for details.",name:"getTilt",required:!0,type:{name:"() => number | undefined"}},getZoom:{defaultValue:null,description:"Returns the zoom of the map. If the zoom has not been set then the result\nis <code>undefined</code>.",name:"getZoom",required:!0,type:{name:"() => number | undefined"}},mapTypes:{defaultValue:null,description:"A registry of <code>MapType</code> instances by string ID.",name:"mapTypes",required:!0,type:{name:"MapTypeRegistry"}},moveCamera:{defaultValue:null,description:"Immediately sets the map&#39;s camera to the target camera options,\nwithout animation.",name:"moveCamera",required:!0,type:{name:"(cameraOptions: CameraOptions) => void"}},overlayMapTypes:{defaultValue:null,description:"Additional map types to overlay. Overlay map types will display on top of\nthe base map they are attached to, in the order in which they appear in\nthe <code>overlayMapTypes</code> array (overlays with higher index values\nare displayed in front of overlays with lower index values).",name:"overlayMapTypes",required:!0,type:{name:"MVCArray<MapType | null>"}},panBy:{defaultValue:null,description:"Changes the center of the map by the given distance in pixels. If the\ndistance is less than both the width and height of the map, the\ntransition will be smoothly animated. Note that the map coordinate system\nincreases from west to east (for x values) and north to south (for y\nvalues).\n@param x Number of pixels to move the map in the x direction.\n@param y Number of pixels to move the map in the y direction.",name:"panBy",required:!0,type:{name:"(x: number, y: number) => void"}},panTo:{defaultValue:null,description:"Changes the center of the map to the given <code>LatLng</code>. If the\nchange is less than both the width and height of the map, the transition\nwill be smoothly animated.\n@param latLng The new center latitude/longitude of the map.",name:"panTo",required:!0,type:{name:"(latLng: LatLng | LatLngLiteral) => void"}},panToBounds:{defaultValue:null,description:"Pans the map by the minimum amount necessary to contain the given\n<code>LatLngBounds</code>. It makes no guarantee where on the map the\nbounds will be, except that the map will be panned to show as much of the\nbounds as possible inside <code>{currentMapSizeInPx} - {padding}</code>.\nFor both raster and vector maps, the map&#39;s zoom, tilt, and heading\nwill not be changed.\n@param latLngBounds The bounds to pan the map to.\n@param padding Padding in pixels. A number value will yield the same\npadding on all 4 sides. The default value is 0.",name:"panToBounds",required:!0,type:{name:"(latLngBounds: LatLngBounds | LatLngBoundsLiteral, padding?: number | Padding | undefined) => void"}},setCenter:{defaultValue:null,description:"",name:"setCenter",required:!0,type:{name:"(latlng: LatLng | LatLngLiteral) => void"}},setClickableIcons:{defaultValue:null,description:"Controls whether the map icons are clickable or not. A map icon\nrepresents a point of interest, also known as a POI. To disable the\nclickability of map icons, pass a value of <code>false</code> to this\nmethod.",name:"setClickableIcons",required:!0,type:{name:"(value: boolean) => void"}},setHeading:{defaultValue:null,description:"Sets the compass heading for map measured in degrees from cardinal\ndirection North. For raster maps, this method only applies to aerial\nimagery.",name:"setHeading",required:!0,type:{name:"(heading: number) => void"}},setMapTypeId:{defaultValue:null,description:"",name:"setMapTypeId",required:!0,type:{name:"(mapTypeId: string) => void"}},setOptions:{defaultValue:null,description:"",name:"setOptions",required:!0,type:{name:"(options: MapOptions | null) => void"}},setStreetView:{defaultValue:null,description:"Binds a <code>StreetViewPanorama</code> to the map. This panorama\noverrides the default <code>StreetViewPanorama</code>, allowing the map\nto bind to an external panorama outside of the map. Setting the panorama\nto <code>null</code> binds the default embedded panorama back to the map.\n@param panorama The panorama to bind to the map.",name:"setStreetView",required:!0,type:{name:"(panorama: StreetViewPanorama | null) => void"}},setTilt:{defaultValue:null,description:"For vector maps, sets the angle of incidence of the map. The allowed\nvalues are restricted depending on the zoom level of the map. For raster\nmaps, controls the automatic switching behavior for the angle of\nincidence of the map. The only allowed values are <code>0</code> and\n<code>45</code>. <code>setTilt(0)</code> causes the map to always use a\n0&deg; overhead view regardless of the zoom level and viewport.\n<code>setTilt(45)</code> causes the tilt angle to automatically switch to\n45 whenever 45&deg; imagery is available for the current zoom level and\nviewport, and switch back to 0 whenever 45&deg; imagery is not available\n(this is the default behavior). 45&deg; imagery is only available for\n<code>satellite</code> and <code>hybrid</code> map types, within some\nlocations, and at some zoom levels. <b>Note:</b> <code>getTilt</code>\nreturns the current tilt angle, not the value set by\n<code>setTilt</code>. Because <code>getTilt</code> and\n<code>setTilt</code> refer to different things, do not\n<code>bind()</code> the <code>tilt</code> property; doing so may yield\nunpredictable effects.",name:"setTilt",required:!0,type:{name:"(tilt: number) => void"}},setZoom:{defaultValue:null,description:"Sets the zoom of the map.\n@param zoom Larger zoom values correspond to a higher resolution.",name:"setZoom",required:!0,type:{name:"(zoom: number) => void"}},addListener:{defaultValue:null,description:"Adds the given listener function to the given event name. Returns an\nidentifier for this listener that can be used with\n<code>google.maps.event.removeListener</code>.",name:"addListener",required:!0,type:{name:"(eventName: string, handler: Function) => MapsEventListener"}},bindTo:{defaultValue:null,description:"Binds a View to a Model.",name:"bindTo",required:!0,type:{name:"(key: string, target: MVCObject, targetKey?: string | null | undefined, noNotify?: boolean | undefined) => void"}},get:{defaultValue:null,description:"Gets a value.",name:"get",required:!0,type:{name:"(key: string) => any"}},notify:{defaultValue:null,description:"Notify all observers of a change on this property. This notifies both\nobjects that are bound to the object&#39;s property as well as the object\nthat it is bound to.",name:"notify",required:!0,type:{name:"(key: string) => void"}},set:{defaultValue:null,description:"Sets a value.",name:"set",required:!0,type:{name:"(key: string, value: any) => void"}},setValues:{defaultValue:null,description:"Sets a collection of key-value pairs.",name:"setValues",required:!0,type:{name:"(values?: object | null | undefined) => void"}},unbind:{defaultValue:null,description:"Removes a binding. Unbinding will set the unbound property to the current\nvalue. The object will not be notified, as the value has not changed.",name:"unbind",required:!0,type:{name:"(key: string) => void"}},unbindAll:{defaultValue:null,description:"Removes all bindings.",name:"unbindAll",required:!0,type:{name:"() => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/google/Menu/ContextMenuOverlayView.tsx#contextMenuOverlayFactory"]={docgenInfo:contextMenuOverlayFactory.__docgenInfo,name:"contextMenuOverlayFactory",path:"src/google/Menu/ContextMenuOverlayView.tsx#contextMenuOverlayFactory"})}catch(__react_docgen_typescript_loader_error){}const GoogleMapContext=(0,react.createContext)(void 0),mapReducer=(state,action)=>{const{type:type,data:data}=action;switch(type){case"setMap":return{...state,map:data,contextMenu:contextMenuOverlayFactory(data)};case"setDrawingManager":return{...state,drawingManager:data};default:throw new Error(`Unhandled action type: ${type}`)}},render=status=>(0,jsx_runtime.jsx)("h1",{children:status});render.displayName="render";const GoogleMapProvider=_ref=>{let{children:children,googleApiKey:googleApiKey,containerRef:containerRef,center:center,minZoom:minZoom,addedPolygonDisplaySettings:addedPolygonDisplaySettings,zoom:zoom,onZoomChange:onZoomChange,modes:modes}=_ref;const[state,dispatch]=(0,react.useReducer)(mapReducer,{map:void 0});return(0,jsx_runtime.jsxs)(GoogleMapContext.Provider,{value:state,children:[(0,jsx_runtime.jsxs)(index_umd.Wrapper,{apiKey:googleApiKey||"",render:render,libraries:["drawing"],children:[(0,jsx_runtime.jsx)(google_Map_Map,{containerRef:containerRef,onInit:map=>dispatch({type:"setMap",data:map}),center:center,minZoom:minZoom,zoom:zoom,onZoomChange:onZoomChange}),(0,jsx_runtime.jsx)(Map_DrawingManager,{modes:modes,onInit:drawingManager=>dispatch({type:"setDrawingManager",data:drawingManager})}),children||null]}),(0,jsx_runtime.jsx)(Map_ControlBoard,{addedPolygonDisplaySettings:addedPolygonDisplaySettings})]})};GoogleMapProvider.displayName="GoogleMapProvider",GoogleMapProvider.defaultProps={children:void 0,googleApiKey:""};const useContextMenu=()=>{const context=(0,react.useContext)(GoogleMapContext);if(void 0===context)throw new Error("useContextMenu must be used within a MapProvider");return context.contextMenu},useGoogleMap=()=>{const context=(0,react.useContext)(GoogleMapContext);if(void 0===context)throw new Error("useMap must be used within a GeoMap component");return context.map},useDrawingManger=()=>{const context=(0,react.useContext)(GoogleMapContext);if(void 0===context)throw new Error("useMap must be used within a MapProvider");return context.drawingManager};try{GoogleMapProvider.displayName="GoogleMapProvider",GoogleMapProvider.__docgenInfo={description:"",displayName:"GoogleMapProvider",props:{googleApiKey:{defaultValue:{value:""},description:"",name:"googleApiKey",required:!1,type:{name:"string"}},modes:{defaultValue:null,description:"",name:"modes",required:!1,type:{name:"DrawingMode[]"}},addedPolygonDisplaySettings:{defaultValue:null,description:"",name:"addedPolygonDisplaySettings",required:!1,type:{name:"PolygonDisplaySettings"}},containerRef:{defaultValue:null,description:"",name:"containerRef",required:!0,type:{name:"RefObject<HTMLDivElement>"}},center:{defaultValue:null,description:"",name:"center",required:!1,type:{name:"Point"}},minZoom:{defaultValue:null,description:"",name:"minZoom",required:!1,type:{name:"number"}},zoom:{defaultValue:null,description:"",name:"zoom",required:!1,type:{name:"number"}},onZoomChange:{defaultValue:null,description:"",name:"onZoomChange",required:!1,type:{name:"((zoom?: number) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/google/Map/MapContext.tsx#GoogleMapProvider"]={docgenInfo:GoogleMapProvider.__docgenInfo,name:"GoogleMapProvider",path:"src/google/Map/MapContext.tsx#GoogleMapProvider"})}catch(__react_docgen_typescript_loader_error){}const Map_Map_Map=_ref=>{let{container:container,center:center,onInit:onInit}=_ref;const map=(0,react.useRef)(null),mapboxgl=useMapboxGl();return(0,react.useEffect)((()=>{if(map.current||!mapboxgl)return;const options={container:container.current||"",style:"mapbox://styles/mapbox/streets-v12",zoom:9};center&&(options.center=[center.lng,center.lat]),map.current=new mapboxgl.Map(options),onInit&&onInit(map.current)})),null};var mapbox_Map_Map=Map_Map_Map;try{Map_Map_Map.displayName="Map",Map_Map_Map.__docgenInfo={description:"",displayName:"Map",props:{container:{defaultValue:null,description:"",name:"container",required:!0,type:{name:"RefObject<HTMLElement>"}},center:{defaultValue:null,description:"",name:"center",required:!1,type:{name:"Point"}},onInit:{defaultValue:null,description:"",name:"onInit",required:!1,type:{name:"((map: MapboxMap) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/mapbox/Map/Map.tsx#Map"]={docgenInfo:Map_Map_Map.__docgenInfo,name:"Map",path:"src/mapbox/Map/Map.tsx#Map"})}catch(__react_docgen_typescript_loader_error){}var mapbox_useLoadMapboxGl=apiKey=>{const[mapboxGl,setMapboxGl]=(0,react.useState)();return(0,react.useEffect)((()=>{(async()=>Promise.all([__webpack_require__.e(158).then(__webpack_require__.t.bind(__webpack_require__,"./node_modules/mapbox-gl/dist/mapbox-gl.js",23)),Promise.all([__webpack_require__.e(104),__webpack_require__.e(657)]).then(__webpack_require__.bind(__webpack_require__,"./node_modules/mapbox-gl/dist/mapbox-gl.css"))]).then((_ref=>{let[lib]=_ref;lib.default.accessToken=apiKey,setMapboxGl(lib.default)})))().catch((()=>{throw new Error("mapbox-gl library is not installed. Please check installation instructions: https://docs.mapbox.com/mapbox-gl-js/guides/install/")}))}),[]),mapboxGl};const MapContext_mapReducer=(state,action)=>{const{type:type,data:data}=action;switch(type){case"setMap":return{...state,map:data};case"setMapboxGl":return{...state,mapboxGl:data};default:throw new Error(`Unhandled action type: ${type}`)}},MapContext_MapContext=(0,react.createContext)(void 0),MapboxProvider=_ref=>{let{children:children,containerRef:containerRef,apiKey:apiKey,center:center}=_ref;const[state,dispatch]=(0,react.useReducer)(MapContext_mapReducer,{map:void 0,mapboxGl:void 0}),mapboxGl=mapbox_useLoadMapboxGl(apiKey);return(0,react.useEffect)((()=>{mapboxGl&&dispatch({type:"setMapboxGl",data:mapboxGl})}),[mapboxGl,apiKey]),(0,jsx_runtime.jsxs)(MapContext_MapContext.Provider,{value:state,children:[(0,jsx_runtime.jsx)(mapbox_Map_Map,{container:containerRef,center:center,onInit:map=>dispatch({type:"setMap",data:map})}),children]})};MapboxProvider.displayName="MapboxProvider";const useMapboxGl=()=>{const context=(0,react.useContext)(MapContext_MapContext);if(void 0===context)throw new Error("useMap must be used within a MapProvider");return context.mapboxGl};var Map_MapContext=MapboxProvider;try{MapContext_MapContext.displayName="MapContext",MapContext_MapContext.__docgenInfo={description:"",displayName:"MapContext",props:{apiKey:{defaultValue:null,description:"",name:"apiKey",required:!0,type:{name:"string"}},containerRef:{defaultValue:null,description:"",name:"containerRef",required:!0,type:{name:"RefObject<HTMLDivElement>"}},center:{defaultValue:null,description:"",name:"center",required:!1,type:{name:"Point"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/mapbox/Map/MapContext.tsx#MapContext"]={docgenInfo:MapContext_MapContext.__docgenInfo,name:"MapContext",path:"src/mapbox/Map/MapContext.tsx#MapContext"})}catch(__react_docgen_typescript_loader_error){}var LocalizationProvider=__webpack_require__("./src/drawings/LocalizationProvider.tsx");const GeoMap=_ref=>{let{containerRef:containerRef,children:children,center:center,minZoom:minZoom,addedPolygonDisplaySettings:addedPolygonDisplaySettings,zoom:zoom,localization:localization,onZoomChange:onZoomChange,modes:modes}=_ref;const provider=useProvider(),apiKey=(0,react.useContext)(MapContext)?.apiKey||"";if("google"===provider)return(0,jsx_runtime.jsx)(LocalizationProvider._C,{localization:localization,children:(0,jsx_runtime.jsx)(GoogleMapProvider,{containerRef:containerRef,googleApiKey:apiKey,center:center,minZoom:minZoom,zoom:zoom,modes:modes,onZoomChange:onZoomChange,addedPolygonDisplaySettings:addedPolygonDisplaySettings,children:children})});if("mapbox"===provider)return(0,jsx_runtime.jsx)(Map_MapContext,{containerRef:containerRef,apiKey:apiKey,center:center,children:children});throw new Error(`Unknown provider: ${provider}`)};var drawings_GeoMap=GeoMap;try{GeoMap.displayName="GeoMap",GeoMap.__docgenInfo={description:"",displayName:"GeoMap",props:{containerRef:{defaultValue:null,description:"",name:"containerRef",required:!0,type:{name:"RefObject<HTMLDivElement>"}},center:{defaultValue:null,description:"",name:"center",required:!1,type:{name:"Point"}},modes:{defaultValue:null,description:"",name:"modes",required:!1,type:{name:"DrawingMode[]"}},minZoom:{defaultValue:null,description:"",name:"minZoom",required:!1,type:{name:"number"}},zoom:{defaultValue:null,description:"",name:"zoom",required:!1,type:{name:"number"}},onZoomChange:{defaultValue:null,description:"",name:"onZoomChange",required:!1,type:{name:"((zoom?: number) => void)"}},localization:{defaultValue:null,description:"",name:"localization",required:!1,type:{name:"Partial<LocalizationMap>"}},addedPolygonDisplaySettings:{defaultValue:null,description:"",name:"addedPolygonDisplaySettings",required:!1,type:{name:"PolygonDisplaySettings"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/drawings/GeoMap.tsx#GeoMap"]={docgenInfo:GeoMap.__docgenInfo,name:"GeoMap",path:"src/drawings/GeoMap.tsx#GeoMap"})}catch(__react_docgen_typescript_loader_error){}const MenuItem=_ref=>{let{label:label,onClick:onClick}=_ref;return(0,jsx_runtime.jsx)("div",{className:"delete-menu-item",role:"presentation",onClick:onClick,onKeyDown:onClick,children:label})};MenuItem.displayName="MenuItem";var Menu_MenuItem=MenuItem;try{MenuItem.displayName="MenuItem",MenuItem.__docgenInfo={description:"",displayName:"MenuItem",props:{label:{defaultValue:null,description:"",name:"label",required:!0,type:{name:"string"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!0,type:{name:"() => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/google/Menu/MenuItem.tsx#MenuItem"]={docgenInfo:MenuItem.__docgenInfo,name:"MenuItem",path:"src/google/Menu/MenuItem.tsx#MenuItem"})}catch(__react_docgen_typescript_loader_error){}const DeleteVertex=_ref=>{let{path:path,vertexIndex:vertexIndex,close:close,label:label}=_ref;const removeVertex=(0,react.useCallback)((()=>{path&&void 0!==vertexIndex?(path.removeAt(vertexIndex),close()):close()}),[path,vertexIndex,close]);return(0,jsx_runtime.jsx)(Menu_MenuItem,{label:label,onClick:removeVertex})};DeleteVertex.displayName="DeleteVertex";var Menu_DeleteVertex=DeleteVertex;try{DeleteVertex.displayName="DeleteVertex",DeleteVertex.__docgenInfo={description:"",displayName:"DeleteVertex",props:{path:{defaultValue:null,description:"",name:"path",required:!0,type:{name:"MVCArray<LatLng>"}},label:{defaultValue:null,description:"",name:"label",required:!0,type:{name:"string"}},vertexIndex:{defaultValue:null,description:"",name:"vertexIndex",required:!0,type:{name:"number"}},close:{defaultValue:null,description:"",name:"close",required:!0,type:{name:"() => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/google/Menu/DeleteVertex.tsx#DeleteVertex"]={docgenInfo:DeleteVertex.__docgenInfo,name:"DeleteVertex",path:"src/google/Menu/DeleteVertex.tsx#DeleteVertex"})}catch(__react_docgen_typescript_loader_error){}const DeletePolygon=_ref=>{let{onDelete:onDelete,close:close,label:label}=_ref;const removePolygon=(0,react.useCallback)((()=>{onDelete(),close()}),[onDelete,close]);return(0,jsx_runtime.jsx)(Menu_MenuItem,{label:label,onClick:removePolygon})};DeletePolygon.displayName="DeletePolygon";var Menu_DeletePolygon=DeletePolygon;try{DeletePolygon.displayName="DeletePolygon",DeletePolygon.__docgenInfo={description:"",displayName:"DeletePolygon",props:{label:{defaultValue:null,description:"",name:"label",required:!0,type:{name:"string"}},onDelete:{defaultValue:null,description:"",name:"onDelete",required:!0,type:{name:"() => void"}},close:{defaultValue:null,description:"",name:"close",required:!0,type:{name:"() => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/google/Menu/DeletePolygon.tsx#DeletePolygon"]={docgenInfo:DeletePolygon.__docgenInfo,name:"DeletePolygon",path:"src/google/Menu/DeletePolygon.tsx#DeletePolygon"})}catch(__react_docgen_typescript_loader_error){}const GooglePolygon=_ref=>{let{coordinates:coordinates,editable:editable,onChange:onChange,googlePolygon:googlePolygon,displaySettings:displaySettings,onDelete:onDelete}=_ref;const map=useGoogleMap(),contextMenu=useContextMenu(),[polygon,setPolygon]=(0,react.useState)(void 0),[paths,setPaths]=(0,react.useState)(void 0),getLabel=(0,LocalizationProvider.wY)(),onPolygonUpdate=(0,react.useCallback)((()=>{if(!polygon)return;const points=mvcToLatLong(polygon?.getPath().getArray());onChange&&onChange(points)}),[onChange,polygon]),onDeletePolygon=(0,react.useMemo)((()=>{if(onDelete&&polygon)return()=>{polygon.setMap(null),onDelete()}}),[onDelete,polygon]);return(0,react.useEffect)((()=>{if(googlePolygon)setPolygon(googlePolygon),googlePolygon.setOptions({strokeColor:displaySettings?.borderColor,strokeOpacity:displaySettings?.borderOpacity,strokeWeight:displaySettings?.borderWidth,fillColor:displaySettings?.fillColor,fillOpacity:displaySettings?.fillOpacity});else if(!polygon){const p=new google.maps.Polygon({paths:coordinates,strokeColor:displaySettings?.borderColor,strokeOpacity:displaySettings?.borderOpacity,strokeWeight:displaySettings?.borderWidth,fillColor:displaySettings?.fillColor,fillOpacity:displaySettings?.fillOpacity});setPolygon(p)}return()=>{polygon&&polygon.setMap(null)}}),[]),(0,react.useEffect)((()=>{const insertLs=paths?.addListener("insert_at",onPolygonUpdate),updateLs=paths?.addListener("set_at",onPolygonUpdate),removeLs=paths?.addListener("remove_at",onPolygonUpdate);return()=>{[insertLs,updateLs,removeLs].forEach((ls=>{ls&&google.maps.event.removeListener(ls)}))}}),[paths,onPolygonUpdate]),(0,react.useEffect)((()=>{if(!polygon)return()=>{};let menuLs;return polygon&&(menuLs=google.maps.event.addListener(polygon,"contextmenu",(e=>{void 0===e.vertex?e.latLng&&onDeletePolygon&&contextMenu.open(e.latLng,(0,jsx_runtime.jsx)(Menu_DeletePolygon,{label:getLabel(LocalizationProvider.Fe.DELETE_POLYGON),onDelete:onDeletePolygon,close:contextMenu.close})):contextMenu.open(polygon.getPath().getAt(e.vertex),(0,jsx_runtime.jsx)(Menu_DeleteVertex,{path:polygon.getPath(),label:getLabel(LocalizationProvider.Fe.DELETE_VERTEX),vertexIndex:e.vertex,close:contextMenu.close}))}))),()=>{menuLs&&google.maps.event.removeListener(menuLs)}}),[polygon,onDeletePolygon,getLabel]),(0,react.useEffect)((()=>{polygon&&map&&(polygon.setMap(map),onPolygonUpdate())}),[polygon,map]),(0,react.useEffect)((()=>{polygon?.setEditable(editable||!1)}),[polygon,editable]),(0,react.useEffect)((()=>{polygon?.setOptions({strokeColor:displaySettings?.borderColor,strokeOpacity:displaySettings?.borderOpacity,strokeWeight:displaySettings?.borderWidth,fillColor:displaySettings?.fillColor,fillOpacity:displaySettings?.fillOpacity})}),[displaySettings,polygon]),(0,react.useEffect)((()=>{if(!polygon)return;polygon?.setOptions({paths:coordinates});const newPath=polygon.getPath();setPaths(newPath)}),[polygon,coordinates]),null};var Map_GooglePolygon=GooglePolygon;try{GooglePolygon.displayName="GooglePolygon",GooglePolygon.__docgenInfo={description:"",displayName:"GooglePolygon",props:{coordinates:{defaultValue:null,description:"",name:"coordinates",required:!1,type:{name:"Point[]"}},googlePolygon:{defaultValue:null,description:"",name:"googlePolygon",required:!1,type:{name:"Polygon"}},editable:{defaultValue:null,description:"",name:"editable",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"((points: Point[], key?: string) => void)"}},onDelete:{defaultValue:null,description:"",name:"onDelete",required:!1,type:{name:"(() => void)"}},figureKey:{defaultValue:null,description:"",name:"figureKey",required:!1,type:{name:"string"}},displaySettings:{defaultValue:null,description:"",name:"displaySettings",required:!1,type:{name:"PolygonDisplaySettings"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/google/Map/GooglePolygon.tsx#GooglePolygon"]={docgenInfo:GooglePolygon.__docgenInfo,name:"GooglePolygon",path:"src/google/Map/GooglePolygon.tsx#GooglePolygon"})}catch(__react_docgen_typescript_loader_error){}const Polygon=_ref=>{let{coordinates:coordinates,editable:editable,removable:removable,onChange:onChange,figureId:figureId,displaySettings:displaySettings,apiObject:apiObject}=_ref;const provider=useProvider(),dispatchPolygonUpdate=(()=>{const dispatch=usePolygonRegistryDispatch();return(0,react.useCallback)((payload=>{dispatch({type:"polygonUpdate",payload:payload})}),[dispatch])})(),dispatchPolygonDeleted=(()=>{const dispatch=usePolygonRegistryDispatch();return(0,react.useCallback)((payload=>{dispatch({type:"polygonDeleted",payload:payload})}),[dispatch])})(),polygonId=(0,react.useMemo)((()=>figureId||(0,v4.Z)()),[]),defaultDisplaySettings=(0,react.useContext)(DisplaySettingsContext)?.polygon,polygonOnChange=(0,react.useCallback)(((points,key)=>{dispatchPolygonUpdate({polygonId:polygonId,points:points}),onChange&&onChange(points,key)}),[polygonId,onChange,dispatchPolygonUpdate]),polygonOnDelete=(0,react.useCallback)((()=>{dispatchPolygonDeleted({polygonId:polygonId,points:[]})}),[dispatchPolygonDeleted,polygonId]);return"google"===provider?(0,jsx_runtime.jsx)(Map_GooglePolygon,{coordinates:coordinates,editable:editable,onChange:polygonOnChange,onDelete:removable?polygonOnDelete:void 0,displaySettings:{...defaultDisplaySettings,...displaySettings},googlePolygon:apiObject},polygonId):null};var drawings_Polygon=Polygon;try{Polygon.displayName="Polygon",Polygon.__docgenInfo={description:"",displayName:"Polygon",props:{coordinates:{defaultValue:null,description:"",name:"coordinates",required:!1,type:{name:"Point[]"}},editable:{defaultValue:null,description:"",name:"editable",required:!1,type:{name:"boolean"}},removable:{defaultValue:null,description:"",name:"removable",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"((points: Point[], key?: string) => void)"}},figureId:{defaultValue:null,description:"",name:"figureId",required:!1,type:{name:"string"}},displaySettings:{defaultValue:null,description:"",name:"displaySettings",required:!1,type:{name:"PolygonDisplaySettings"}},apiObject:{defaultValue:null,description:"",name:"apiObject",required:!1,type:{name:"unknown"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/drawings/Polygon.tsx#Polygon"]={docgenInfo:Polygon.__docgenInfo,name:"Polygon",path:"src/drawings/Polygon.tsx#Polygon"})}catch(__react_docgen_typescript_loader_error){}const GoogleMarker=_ref=>{let{marker:marker,coordinates:coordinates,draggable:draggable,onChange:onChange}=_ref;const[markerObject,setMarkerObject]=(0,react.useState)(null),map=useGoogleMap();return(0,react.useEffect)((()=>{marker&&!markerObject&&setMarkerObject(marker)}),[marker,markerObject]),(0,react.useEffect)((()=>{if(!map||markerObject)return;const newMarker=new google.maps.Marker({position:coordinates,map:map,draggable:draggable});setMarkerObject(newMarker)}),[map,markerObject]),(0,react.useEffect)((()=>{if(!markerObject||!coordinates)return;const{lat:lat,lng:lng}=coordinates;void 0!==lat&&void 0!==lng&&markerObject.setPosition({lat:lat,lng:lng})}),[markerObject,coordinates]),(0,react.useEffect)((()=>{markerObject&&markerObject.setDraggable(draggable||null)}),[draggable,markerObject]),(0,react.useEffect)((()=>()=>{markerObject?.setMap(null),setMarkerObject(null)}),[]),(0,react.useEffect)((()=>{let listener;return markerObject&&onChange&&(listener=google.maps.event.addListener(markerObject,"dragend",(()=>{onChange({lat:markerObject.getPosition().lat(),lng:markerObject.getPosition().lng()})}))),()=>{listener&&google.maps.event.removeListener(listener)}}),[markerObject,onChange]),null};var Map_GoogleMarker=GoogleMarker;try{GoogleMarker.displayName="GoogleMarker",GoogleMarker.__docgenInfo={description:"",displayName:"GoogleMarker",props:{marker:{defaultValue:null,description:"",name:"marker",required:!1,type:{name:"Marker"}},coordinates:{defaultValue:null,description:"",name:"coordinates",required:!1,type:{name:"Point"}},draggable:{defaultValue:null,description:"",name:"draggable",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"((coordinates: Point) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/google/Map/GoogleMarker.tsx#GoogleMarker"]={docgenInfo:GoogleMarker.__docgenInfo,name:"GoogleMarker",path:"src/google/Map/GoogleMarker.tsx#GoogleMarker"})}catch(__react_docgen_typescript_loader_error){}const MapboxMarker=_ref=>{let{coordinates:coordinates,draggable:draggable,onChange:onChange}=_ref;const mapboxgl=useMapboxGl(),[markerObject,setMarkerObject]=(0,react.useState)(null),map=(()=>{const context=(0,react.useContext)(MapContext_MapContext);if(void 0===context)throw new Error("useMap must be used within a MapProvider");return context.map})();return(0,react.useEffect)((()=>{if(!coordinates||!map||!mapboxgl)return;const marker=markerObject||new mapboxgl.Marker;marker.setLngLat([coordinates.lng,coordinates.lat]),marker.addTo(map),marker.setDraggable(draggable||!1),setMarkerObject(marker)}),[map,coordinates,markerObject,draggable]),(0,react.useEffect)((()=>{markerObject&&onChange&&markerObject.on("dragend",(()=>{const point=markerObject.getLngLat();onChange({lat:point.lat,lng:point.lng})}))}),[markerObject]),null};var Map_MapboxMarker=MapboxMarker;try{MapboxMarker.displayName="MapboxMarker",MapboxMarker.__docgenInfo={description:"",displayName:"MapboxMarker",props:{coordinates:{defaultValue:null,description:"",name:"coordinates",required:!1,type:{name:"Point"}},draggable:{defaultValue:null,description:"",name:"draggable",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"((coordinates: Point) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/mapbox/Map/MapboxMarker.tsx#MapboxMarker"]={docgenInfo:MapboxMarker.__docgenInfo,name:"MapboxMarker",path:"src/mapbox/Map/MapboxMarker.tsx#MapboxMarker"})}catch(__react_docgen_typescript_loader_error){}const Marker=_ref=>{let{coordinates:coordinates,draggable:draggable,onChange:onChange,figureId:figureId}=_ref;const provider=useProvider(),markerId=(0,react.useMemo)((()=>figureId||(0,v4.Z)()),[]);return"google"===provider?(0,jsx_runtime.jsx)(Map_GoogleMarker,{draggable:draggable,coordinates:coordinates,onChange:onChange},markerId):"mapbox"===provider?(0,jsx_runtime.jsx)(Map_MapboxMarker,{draggable:draggable,coordinates:coordinates,onChange:onChange},markerId):null};var drawings_Marker=Marker;try{Marker.displayName="Marker",Marker.__docgenInfo={description:"",displayName:"Marker",props:{coordinates:{defaultValue:null,description:"",name:"coordinates",required:!0,type:{name:"Point"}},draggable:{defaultValue:null,description:"",name:"draggable",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"((coordinates: Point) => void)"}},figureId:{defaultValue:null,description:"",name:"figureId",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/drawings/Marker.tsx#Marker"]={docgenInfo:Marker.__docgenInfo,name:"Marker",path:"src/drawings/Marker.tsx#Marker"})}catch(__react_docgen_typescript_loader_error){}const usePolygonsUpdates=function(){let group=arguments.length>0&&void 0!==arguments[0]?arguments[0]:constants.TP;const polygonsData=usePolygonsData();return(0,react.useMemo)((()=>{const response=[];if(group){const polygonsGroup=polygonsData.get(group);return polygonsGroup?(polygonsGroup.forEach((_ref=>{let{points:points,polygonId:polygonId}=_ref;response.push({points:points,id:polygonId})})),response):[]}return polygonsData.forEach((polygonsGroup=>{polygonsGroup.forEach((_ref2=>{let{points:points,polygonId:polygonId}=_ref2;response.push({points:points,id:polygonId})}))})),response}),[polygonsData,group])};var drawings_usePolygonsUpdates=usePolygonsUpdates;try{usePolygonsUpdates.displayName="usePolygonsUpdates",usePolygonsUpdates.__docgenInfo={description:"",displayName:"usePolygonsUpdates",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/drawings/usePolygonsUpdates.tsx#usePolygonsUpdates"]={docgenInfo:usePolygonsUpdates.__docgenInfo,name:"usePolygonsUpdates",path:"src/drawings/usePolygonsUpdates.tsx#usePolygonsUpdates"})}catch(__react_docgen_typescript_loader_error){}},"./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./src/google/Menu/context-menu.css":function(module,__webpack_exports__,__webpack_require__){var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/css-loader/dist/runtime/sourceMaps.js"),_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,".delete-menu {\n    position: absolute;\n    background: white;\n    padding: 3px;\n    color: #666;\n    font-weight: bold;\n    border: 1px solid #999;\n    box-shadow: 1px 3px 3px rgba(0, 0, 0, 0.3);\n    margin-top: -10px;\n    margin-left: 10px;\n}\n\n.delete-menu-item {\n    font-family: sans-serif;\n    font-size: 14px;\n    cursor: pointer;\n}\n\n.delete-menu .delete-menu-item:hover {\n    background: #eee;\n}","",{version:3,sources:["webpack://./src/google/Menu/context-menu.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,YAAY;IACZ,WAAW;IACX,iBAAiB;IACjB,sBAAsB;IACtB,0CAA0C;IAC1C,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,uBAAuB;IACvB,eAAe;IACf,eAAe;AACnB;;AAEA;IACI,gBAAgB;AACpB",sourcesContent:[".delete-menu {\n    position: absolute;\n    background: white;\n    padding: 3px;\n    color: #666;\n    font-weight: bold;\n    border: 1px solid #999;\n    box-shadow: 1px 3px 3px rgba(0, 0, 0, 0.3);\n    margin-top: -10px;\n    margin-left: 10px;\n}\n\n.delete-menu-item {\n    font-family: sans-serif;\n    font-size: 14px;\n    cursor: pointer;\n}\n\n.delete-menu .delete-menu-item:hover {\n    background: #eee;\n}"],sourceRoot:""}]),__webpack_exports__.Z=___CSS_LOADER_EXPORT___}}]);